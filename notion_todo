#!/usr/bin/python
import requests
import sys
import os
from pathlib import Path

HOME_DIR = Path.home()
CONFIG_DIR = Path(f'{HOME_DIR}/.config/NotionTODO')
ID_FILE = Path(f'{CONFIG_DIR}/id.txt')
AUTH_FILE = Path(f'{CONFIG_DIR}/auth.txt')

def get_authentication_token() -> str:
    with open(AUTH_FILE) as f:
        return f.readline()


def get_page_id() -> str:
    with open(ID_FILE) as f:
        return f.readline()


def file_exists_and_not_empty(path: Path) -> bool:
    if not CONFIG_DIR.is_dir():
        os.makedirs(CONFIG_DIR)
    if not path.is_file():
        return False
    with open(path) as f:
        return len(f.readlines()) > 0


def ensure_auth_file_exists():
    if file_exists_and_not_empty(AUTH_FILE):
        return
    token = input('Please input the bearer token: ')
    with open(AUTH_FILE, 'w') as f:
        f.write(token)


def ensure_id_file_exists():
    if file_exists_and_not_empty(ID_FILE):
        return
    url = input('Please input the page id: ')
    with open(ID_FILE, 'w') as f:
        f.write(url)


def make_request(page_id: str, auth: str, indent: int = 0) -> dict[str, str]:
    url = f'https://api.notion.com/v1/blocks/{page_id}/children'
    headers = {'Notion-Version': '2021-08-16',
               'Authorization': f'Bearer {auth}'}
    try:
        res = requests.get(url, headers=headers, timeout=1)
    except Exception:
        if not has_silent_flag():
            print('Request to Notion timed out')
        return None
    if res.status_code != 200:
        print(f'Error: {res.status_code} request status code')
        return None
    results = []
    for node in res.json()['results']:
        if (todo := node.get('to_do')) is None:
            continue
        obj = {
            'id': node['id'],
            'indent': indent,
            'checked': todo['checked'],
            'text': '\n'.join([t['plain_text'] for t in todo['text']]),
        }
        results.append(obj)
        if node['has_children']:
            results.extend(make_request(obj['id'], auth, indent + 1))
    return results


def pprint(todos: list[dict[str, str]]):
    if len(todos) == 0:
        print('No TODOs!')
        return
    for todo in todos:
        print(
            f'{" " * 4 * todo["indent"]}{"[X]" if todo["checked"] else "[ ]"} {todo["text"]}')


def get_and_exec():
    page_id = get_page_id()
    auth = get_authentication_token()
    todos = make_request(page_id, auth)
    if todos is None:
        return
    pprint(todos)


def has_silent_flag() -> bool:
    return any([arg == '--silent' for arg in sys.argv])


def main():
    config_dir = Path(f'{HOME_DIR}/.config/NotionTODO')
    if has_silent_flag():
        if not config_dir.exists():
            return
        if not file_exists_and_not_empty(ID_FILE) or not file_exists_and_not_empty(AUTH_FILE):
            return
        get_and_exec()
        return
    config_dir.mkdir(parents=True, exist_ok=True)
    ensure_auth_file_exists()
    ensure_id_file_exists()
    get_and_exec()


if __name__ == '__main__':
    main()
